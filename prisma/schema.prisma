// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  SHIPPED
  CANCELED
  REFUNDED
}

enum PaymentMethod {
  CASH_APP_PAY
  AFTERPAY
  PAYPAL
  CREDIT_CARD
}

model User {
  id         Int      @id @default(autoincrement())
  fullName   String   @map("full_name")
  email      String   @unique
  password   String
  role       UserRole
  googleAuth Boolean  @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart?
  order     Order[]

  @@map("users")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  title String
  slug  String @unique

  metaTitle String? @map("meta_title")
  metaDesc  String? @map("meta_desc")

  seoTextRight String? @map("seo_text_right")
  seoTextLeft  String? @map("seo_text_left")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Product {
  id              Int         @id @default(autoincrement())
  title           String      @unique
  slug            String      @unique
  images          String[]
  metaTitle       String?     @map("meta_title")
  metaDesc        String?     @map("meta_desc")
  seoText         String?     @map("seo_text")
  originalPrice   Float       @map("original_price")
  discountedPrice Float?      @map("discounted_price")
  tags            String[]
  categoryId      Int
  category        Category    @relation(fields: [categoryId], references: [id])
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  colors          Color[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  sizes           Size[]

  @@map("products")
}

model Color {
  id      Int      @id @default(autoincrement())
  title   String   @unique
  images  String[]
  inStock Boolean  @default(true)

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  products  Product[]
  cartItem  CartItem[]

  @@map("colors")
}

model Size {
  id      Int     @id @default(autoincrement())
  title   String  @unique
  inStock Boolean @default(true)

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  products  Product[]
  cartItem  CartItem[]

  @@map("sizes")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?       @unique
  token       String
  totalAmount Float      @map("total_amount")
  user        User?      @relation(fields: [userId], references: [id])
  cartItems   CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  colorId   Int
  sizeId    Int
  color     Color    @relation(fields: [colorId], references: [id])
  size      Size     @relation(fields: [sizeId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([cartId, productId, colorId, sizeId])
  @@map("cart_items")
}

model Order {
  id            Int           @id @default(autoincrement())
  userId        Int?
  user          User?         @relation(fields: [userId], references: [id])
  token         String
  fullName      String        @map("full_name")
  zipCode       String        @map("zip_code")
  city          String
  streetAddress String        @map("street_address")
  email         String
  state         String
  phoneNumber   String        @map("phone_number")
  totalAmount   Float         @map("total_amount")
  orderStatus   OrderStatus   @default(PENDING) @map("order_status")
  paymentMethod PaymentMethod @map("payment_method")

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  orderItem OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  size      String?
  color     String?
  quantity  Int      @default(1)
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_items")
}
